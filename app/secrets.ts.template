export const MAPBOX_ACCESS_TOKEN = "pk.eyJ1Ijoiamxld2FsbGVuIiwiYSI6ImNrNGFiMmlobzAyYTYzbGxoMGt1NGRmazYifQ.ACzetD69xjKhAYx7_Vf9ew";
export const MAPBOX_STYLE = "mapbox://styles/mapbox/satellite-v9";
export const USERNAME = "";
export const PASSWORD = "";
export const CONFIG = {
    logging: {
        SaveLogs: true,
        EnableAll: true,
        QueryStation: true,
        StationMonitor: true,
        DownloadManager: true,
        UploadManager: true,
        SynchronizePanel: true,
        Progress: false,
        DbInterface: true,
        DiscoverStation: true,
        StationFirmware: true,
        NativeScriptConservify: true,
    },
    developer: {
        /* Address of the developer machine, used for DevTools */
        machine: null,
        /* If this returns true then the url will be queried, otherwise we don't query that station. */
        stationFilter: url => {
            return true;
        },
    },
    baseUri: "https://api.fieldkit.org",
    ingestionUri: "https://api.fieldkit.org/ingestion",
    seedDB: false,
    dropTables: false,
    syncMode: "auto",
    discover: {
        enabled: false,
        stations: [
            /*
              All Android emulators are behind their own virtual router that has
              the address 10.0.2.1. The address 10.0.2.2 corresponds to the
              loopback address of the hosting machine. So this configuration
              assumes the fake device is running on the same machine as the
              emulator.

              Google random hex strings to generate random device ids. Or just
              use a name?
            */
            {
                deviceId: "3482abaa0796d68893685274255ba493",
                address: "10.0.2.2",
                port: 2380,
            },
            {
                deviceId: "92175f5f6802c460aca974d1807f0d80",
                address: "10.0.2.2",
                port: 2381,
            },

            /**
               This is how to fake the discovery of a real device on the
               network. My device here always gets this address, and you can get
               the address from the OLED. This requires the real device to
               actually be on your local network.
            */
            {
                deviceId: "de94998a24477609c01bc76c7255f0af",
                address: "192.168.0.166",
                port: 80,
            },
        ],
    },
};
